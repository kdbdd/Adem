<!DOCTYPE html>
<html lang="ar">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>لعبة × و O</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: linear-gradient(45deg, #ff8a00, #e52e71);
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      perspective: 1500px;
      overflow: hidden;
    }

    .container {
      text-align: center;
      background: rgba(255, 255, 255, 0.3);
      padding: 20px;
      border-radius: 15px;
      backdrop-filter: blur(10px);
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      gap: 5px;
      margin-bottom: 15px;
    }

    .cell {
      width: 100px;
      height: 100px;
      border: 2px solid black;
      font-size: 2.5rem;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
    }

    .cell.x { color: red; }
    .cell.o { color: blue; }

    .resetButton, .choiceButton {
      padding: 10px 20px;
      font-size: 1rem;
      background-color: #1caa9c;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin: 5px;
    }

    .resetButton:hover, .choiceButton:hover {
      background-color: #178877;
    }
  </style>
</head>
<body>
  <div class="container">
    <div id="startOptions">
      <div style="font-weight: bold;">من يبدأ اللعب؟</div>
      <button id="playerStart" class="choiceButton">أنا</button>
      <button id="aiStart" class="choiceButton">الذكاء الاصطناعي</button>
    </div>

    <div id="gameArea" style="display:none;">
      <div id="board" class="board">
        <div class="cell" id="cell-0"></div>
        <div class="cell" id="cell-1"></div>
        <div class="cell" id="cell-2"></div>
        <div class="cell" id="cell-3"></div>
        <div class="cell" id="cell-4"></div>
        <div class="cell" id="cell-5"></div>
        <div class="cell" id="cell-6"></div>
        <div class="cell" id="cell-7"></div>
        <div class="cell" id="cell-8"></div>
      </div>
      <button id="resetButton" class="resetButton" style="display:none;">إعادة اللعبة</button>
    </div>
  </div>

  <script>
    const cells = Array.from(document.getElementsByClassName('cell'));
    const resetButton = document.getElementById('resetButton');
    const gameArea = document.getElementById('gameArea');
    const startOptions = document.getElementById('startOptions');
    const playerStart = document.getElementById('playerStart');
    const aiStart = document.getElementById('aiStart');

    let gameBoard = ['', '', '', '', '', '', '', '', ''];
    let currentPlayer = 'X';
    let gameOver = false;
    let humanPlayer = 'X';
    let aiPlayer = 'O';

    function updateBoard() {
      gameBoard.forEach((value, index) => {
        cells[index].textContent = value;
        cells[index].className = 'cell';
        if (value === 'X') cells[index].classList.add('x');
        if (value === 'O') cells[index].classList.add('o');
      });
    }

    function checkWinner(board, player) {
      const winPatterns = [
        [0,1,2],[3,4,5],[6,7,8],
        [0,3,6],[1,4,7],[2,5,8],
        [0,4,8],[2,4,6]
      ];
      return winPatterns.some(pattern =>
        pattern.every(index => board[index] === player)
      );
    }

    function checkDraw(board) {
      return board.every(cell => cell !== '');
    }

    function minimax(board, player) {
      const opponent = player === aiPlayer ? humanPlayer : aiPlayer;

      if (checkWinner(board, aiPlayer)) return { score: 1 };
      if (checkWinner(board, humanPlayer)) return { score: -1 };
      if (checkDraw(board)) return { score: 0 };

      const moves = [];

      board.forEach((val, idx) => {
        if (val === '') {
          const newBoard = [...board];
          newBoard[idx] = player;
          const result = minimax(newBoard, opponent);
          moves.push({ index: idx, score: result.score });
        }
      });

      if (player === aiPlayer) {
        return moves.reduce((best, move) => move.score > best.score ? move : best);
      } else {
        return moves.reduce((best, move) => move.score < best.score ? move : best);
      }
    }

    function aiTurn() {
      if (!gameOver && currentPlayer === aiPlayer) {
        const move = minimax(gameBoard, aiPlayer).index;
        if (move !== undefined) {
          makeMove(move);
        }
      }
    }

    function makeMove(index) {
      if (gameBoard[index] === '' && !gameOver) {
        gameBoard[index] = currentPlayer;
        updateBoard();

        if (checkWinner(gameBoard, currentPlayer)) {
          gameOver = true;
          alert(`فاز اللاعب ${currentPlayer}`);
          resetButton.style.display = 'block';
          return;
        }

        if (checkDraw(gameBoard)) {
          gameOver = true;
          alert('تعادل!');
          resetButton.style.display = 'block';
          return;
        }

        currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
        setTimeout(aiTurn, 300);
      }
    }

    function resetGame() {
      gameBoard = ['', '', '', '', '', '', '', '', ''];
      gameOver = false;
      updateBoard();
      resetButton.style.display = 'none';
    }

    playerStart.addEventListener('click', () => {
      startOptions.style.display = 'none';
      gameArea.style.display = 'block';
      currentPlayer = humanPlayer = 'X';
      aiPlayer = 'O';
    });

    aiStart.addEventListener('click', () => {
      startOptions.style.display = 'none';
      gameArea.style.display = 'block';
      humanPlayer = 'X';
      aiPlayer = 'O';
      currentPlayer = aiPlayer;
      setTimeout(aiTurn, 300);
    });

    cells.forEach((cell, index) => {
      cell.addEventListener('click', () => {
        if (currentPlayer === humanPlayer) {
          makeMove(index);
        }
      });
    });

    resetButton.addEventListener('click', () => {
      resetGame();
      gameArea.style.display = 'none';
      startOptions.style.display = 'block';
    });
  </script>
</body>
</html>
